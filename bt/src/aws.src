alias aws_off='unset AWS_SESSION_TOKEN; unset AWS_SECRET_ACCESS_KEY; unset AWS_ACCESS_KEY_ID'

# aws 
alias aws_unset_session='unset AWS_SESSION_TOKEN; unset AWS_SECRET_ACCESS_KEY; unset AWS_ACCESS_KEY_ID'

# aws
#a_role { 
#    ROLE=${1:-$USER}
#    #echo ROLE: $ROLE
#    [ ! -n ${ROLE} ] && echo "usage: role <some_role>" && return
#    while read line; do 
#      export $line; 
#    done < <(aws-vault exec $ROLE -- env | grep -E '^AWS_')
#}

a_clear() { 
  aws-vault clear
  while read line; do 
    unset ${line%%=*}
  done < <(env | grep -E '^AWS_' | grep -vE '(DEFAULT|BROWSER|BACKEND)' )
  return 0 
} 

a_roles() {
  ROLE=${1:-$USER}
  [ ! -n ${ROLE} ] && echo "usage: role <some_role>" && return
  if [ -n "${AWS_VAULT}" ]; then
    echo "already logged in as: ${AWS_VAULT}"
    return
  fi
  aws_on $ROLE 
  aws iam list-roles | jq -r '. | .Roles[] | .RoleName' | grep -v AWSServiceRole
  aws_off
}

alias a_cli='docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli'

a_set_prof_perl(){
    unset AWS_PROFILE;
    unset AWS_ACCESS_KEY_ID;
    unset AWS_SECRET_ACCESS_KEY;
    unset AWS_SESSION_TOKEN;
    export AWS_PROFILE=${1:-default};
    AWS_MFA_SERIAL=$(aws sts get-caller-identity --query Arn --output text | sed "s/user/mfa/") && \
        eval $(read -p "MFA: " CODE && \
        aws sts get-session-token \
            --serial-number ${AWS_MFA_SERIAL} \
            --token ${CODE} --output=text  | \
        eval `echo "${TOKEN}" | \
        perl -lane \
           'print "\
            export AWS_ACCESS_KEY_ID=$F[1]; \
            export AWS_SECRET_ACCESS_KEY=$F[3]; \
            export AWS_SESSION_TOKEN=$F[4];"'`)
    export AWS_REGION=$(aws configure get region);
}

a_set_prof() {
    unset AWS_PROFILE;
    unset AWS_ACCESS_KEY_ID;
    unset AWS_SECRET_ACCESS_KEY;
    unset AWS_SESSION_TOKEN;
    export AWS_PROFILE=${1:-default};
    AWS_MFA_SERIAL=$(aws sts get-caller-identity \
        --query Arn \
        --output text | \
        sed "s/user/mfa/") && \
        eval $(read -p "MFA: " CODE && \
        aws sts get-session-token \
            --serial-number ${AWS_MFA_SERIAL} \
            --token ${CODE} \
            --output=text | \
        awk '{print "export AWS_ACCESS_KEY_ID=" $2 "\n" "export AWS_SECRET_ACCESS_KEY=" $4 "\n" "export AWS_SESSION_TOKEN=" $5}');\
        export AWS_REGION=$(aws configure get region);
}

a_clear() { 
  aws-vault clear
  while read line; do 
    unset ${line%%=*}
  done < <(env | grep -E '^AWS_' | grep -vE '(DEFAULT|BROWSER|BACKEND)' )
  return 0 
} 

a_roles() {
  ROLE=${1:-$USER}
  [ ! -n ${ROLE} ] && echo "usage: role <some_role>" && return
  if [ -n "${AWS_VAULT}" ]; then
    echo "already logged in as: ${AWS_VAULT}"
    return
  fi
  aws_on $ROLE 
  aws iam list-roles | jq -r '. | .Roles[] | .RoleName' | grep -v AWSServiceRole
  aws_off
}

alias a_cli='docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli'

a_set_prof_perl(){
    unset AWS_PROFILE;
    unset AWS_ACCESS_KEY_ID;
    unset AWS_SECRET_ACCESS_KEY;
    unset AWS_SESSION_TOKEN;
    export AWS_PROFILE=${1:-default};
    AWS_MFA_SERIAL=$(aws sts get-caller-identity --query Arn --output text | sed "s/user/mfa/") && \
        eval $(read -p "MFA: " CODE && \
        aws sts get-session-token \
            --serial-number ${AWS_MFA_SERIAL} \
            --token ${CODE} --output=text  | \
        eval `echo "${TOKEN}" | \
        perl -lane \
           'print "\
            export AWS_ACCESS_KEY_ID=$F[1]; \
            export AWS_SECRET_ACCESS_KEY=$F[3]; \
            export AWS_SESSION_TOKEN=$F[4];"'`)
    export AWS_REGION=$(aws configure get region);
}

a_set_prof() {
    unset AWS_PROFILE;
    unset AWS_ACCESS_KEY_ID;
    unset AWS_SECRET_ACCESS_KEY;
    unset AWS_SESSION_TOKEN;
    export AWS_PROFILE=${1:-default};
    AWS_MFA_SERIAL=$(aws sts get-caller-identity \
        --query Arn \
        --output text | \
        sed "s/user/mfa/") && \
        eval $(read -p "MFA: " CODE && \
        aws sts get-session-token \
            --serial-number ${AWS_MFA_SERIAL} \
            --token ${CODE} \
            --output=text | \
        awk '{print "export AWS_ACCESS_KEY_ID=" $2 "\n" "export AWS_SECRET_ACCESS_KEY=" $4 "\n" "export AWS_SESSION_TOKEN=" $5}');\
        export AWS_REGION=$(aws configure get region);
}

