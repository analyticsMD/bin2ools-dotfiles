#!/usr/bin/env /usr/local/bin/bash
# shellcheck disable=SC2148,SC2034
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# DEBUGGING
# -----------------------------------------------------------------

# global debug function.
to_debug() { [[ "${BT_DEBUG}" = *$1* ]] && >&2 "${@:2}" ;}

# shellcheck disable=SC1090,SC1094 

i=${#BASH_SOURCE[@]}
ver="$(echo "${BASH_VERSION}"             | \
       perl -nle 'print if s/(\d+)\..*/\1/')"
[[ "${ver}" -ne 5 ]] && { 
  echo "WARNING: unsupported shell spawned: ${BASH_VERSION}"
  return 1
}

#export BT_DEBUG="flow env lgin rds rdsc rdst cche util data pmpt qvdb"
to_debug flow && sleep 0.5 && echo "stgs:debug"


# ------------------------------------------------------------------
# SETTINGS
# ------------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:settings"

# additional config settings for BT. 
export BT=${HOME}/.bt
export BT_SETTINGS=quiet 
#export BT_SETTINGS=

# uncomment while debugging.
#export BT_DEBUG="env lgin rds rdsl rdsc rdst cche util data prmt qv"
#export BT_DEBUG="rds rdsl rdsc rdst"

export DEFAULT_ROLE="qventus"
export DEFAULT_ACCOUNT="prod"

# finding the proper sso-lib
export AWSLIB="devops"
# fall back to aws-sso-util when devops isn't available.
[[ ! -e "${DEFAULT_AWSLIB}" ]] && { 
    export AWSLIB="aws" 
    export DEFAULT_AWSLIB="${HOME}/.local/bin/${AWSLIB}-sso-util" 
} 


# -----------------------------------------------------------------
# ARG PARSING
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:arg_parsing"

account="${1:-"prod"}"


# -----------------------------------------------------------------
# SHELL LOADER 
# -----------------------------------------------------------------

# For loading associative arrays from files or variables.


to_debug stgs  echo LOADER_ACTIVE: "${LOADER_ACTIVE}"

. ${BT}/lib/utils.bash
bt_loader



# -----------------------------------------------------------------
# CACHE SETTINGS
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:cache"
set_team


# -----------------------------------------------------------------
# PATH SETTINGS
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:path"

[[ ! -f "${BT}"/cache/path_info ]] && {
  to_debug stgs && sleep 1 && echo stgs:path_info
  "${BT}"/utils/path -s 2>/dev/null | tee ${BT}/cache/path_info 
}

to_debug stgs && sleep 1 && echo stgs:source_path
source <(echo "$("${BT}"/utils/path -s 2>/dev/null)" )

# -----------------------------------------------------------------
# ESSENTIAL ALIASES
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:aliases"

#poetry="$(which poetry)"

# ssm tool.
#alias ssm_cmpl=". ${BT}/src/ssm.cmpl"
#alias ssm="ssm_cmpl; poetry run poe ssm ${@}"

# rds tool.
#alias rds_cmpl=". ${BT}/src/rds.cmpl"
#alias rds="rds_cmpl; poetry run poe rds ${@}"

# other.
#alias rds_term="poetry run poe rds_cmpl && poetry run poe rds ${@}"
#alias dg="poetry run poe rds_cmpl && poetry run poe dg ${@}"



# -----------------------------------------------------------------
# ENV SETTINGS
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:env"

# scripted shell activation (experimental).
#[[ -e "${HOME}/.bt/.iterm2_shell_integration.bash" ]] && { 
#  source "${HOME}/.iterm2_shell_integration.bash"
#}

# defaults should be generated by the loader.
to_debug stgs && echo stgs:env BT_TEAM   : ${BT_TEAM} 
to_debug stgs && echo stgs:env BT_ACCOUNT: ${BT_ACCOUNT} 
to_debug stgs && echo stgs:env BT_ROLE:    ${BT_ROLE}



# -----------------------------------------------------------------
# Bootstrap functions.
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:bootstrap_funcs"




# -----------------------------------------------------------------
# AWS LOGIN
# -----------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:autologin"

# Uncomment this if you want logins to happen 
# through settings.  Team account defaults to prod, for now.
# autologin "${account}" 





# ------------------------------------------------------------------
# load bintools functions, customizations, completions.
# ------------------------------------------------------------------

to_debug flow && sleep 0.5 && echo "stgs:sources"

role=qventus 
[[ -n "${BT_ROLE}" ]] && { role="${BT_ROLE}" ;}
autologin $role 

# Source dotfiles and scripts under ${HOME}/.bt/src
# source_load() 


