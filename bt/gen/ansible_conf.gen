#!/usr/bin/env /usr/local/bin/bash

source bt_env   # Whole environment. Separate from bootstrapping.
                # --  includes BT vars, BT state vars, 
                # --  includes shared PATH vars.
                # --  includes AWS defaults. 
                # --  includes sourcing of other BT libs.


source "${BT}"/sources/generate.d/inst_map.src
debug hosts: "${#inst_map[@]}"
# regenerate inst_map array, if not present.
[[ "${#inst_map[@]}" -lt 2 ]] && {
  # Queries aws for a list of all instances.
  # Caches them as an associative array in a
  # local file in the generate.d dir.
  #
  cache_inst
  # creates: fully populated inst_map array.
  get_inst
}

SRC="${BT}"/sources/generate.d/ansible_ssm.ini

[ ! -d "${BT}/sources/generate.d" ] && \
bt_log "FATAL: ${BT}/sources/generate.d does not exist." && die
[ ! -d "${BT}/utils/gen"          ] && \
bt_log "FATAL: ${BT}/utils/gen dir not found." && die
cat ${BT}/inst/txt/bt_header               > $SRC
echo -ne "\n\n###  records found: " | tee -a $SRC
echo -ne "${#inst_map[@]}"          | tee -a $SRC
echo -ne "\n\n"                     | tee -a $SRC

# print file.
    while IFS= read -r l; do
      while IFS=',' read -r n i ip k pp; do
      tee -a $SRC <<-EOF
${n} ansible_host=$i
EOF
      done
    done < <(printf '%s\n' "${inst_map[@]}" | sort)

echo -ne "\n\n\n" >> $SRC
tee -a $SRC <<-EOF


[all:vars]
    ansible_ssh_common_args=-o \
    StrictHostKeyChecking=no -o \
    ForwardAgent=yes -o \
        ProxyCommand="sh -c \"aws ssm start-session \
            --target %h \
            --document-name AWS-StartSSHSession \
            --parameters 'portNumber=22'\""
    ansible_user='ec2-user'
    ansible_become=true
    ansible_ssh_private_key_file='~/.ssh/ec2-user.pem'
EOF

echo -ne "\n\n\n" >> $SRC

### ----------------------------------------------------
### Print a bash completion file, for sourcing.
### ----------------------------------------------------
ANSIBLE_CMPL=${BT}/sources/generate.d/ansible.cmpl
cat ${BT}/inst/txt/bt_bash_header                  > $ANSIBLE_CMPL
echo -ne '\n\ncomplete -W "\n'                    >> $ANSIBLE_CMPL
for i in `printf '%s\n' ${!inst_map[@]} | sort`; do
  printf '  %s \\\n' $i                           >> $ANSIBLE_CMPL
done
echo -ne "\" ansible_poc\n"                       >> $ANSIBLE_CMPL
echo done.

