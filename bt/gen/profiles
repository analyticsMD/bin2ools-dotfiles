#!/usr/bin/env /usr/local/bin/bash

## ----------------------------------------------------------------
## AWS SETTINGS
## ----------------------------------------------------------------
## Qventus has a lot of infrastructure in AWS. This library
## contains streamlined functions to make that environment
## is easy to work with. 

source <( echo "$("${BT}"/cmd/_path -s 2>/dev/null)" )

# Set and unset AWS_PROFILE.
# --------------------------
# Uses the 'aws configure list-profiles' command for 
# validation (also has auto-completion routines, which 
# are a bit slow).
#
aws_profile () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "USAGE:"
    echo "aws_profile              <- print out current value"
    echo "aws_profile PROFILE_NAME <- set PROFILE_NAME active"
    echo "aws_profile --unset      <- unset the env vars"
  elif [ -z "$1" ]; then
    if [ -z "$AWS_PROFILE$AWS_DEFAULT_PROFILE" ]; then
      echo "No profile is set"
      return 1
    else
      echo "current profile: $AWS_PROFILE"
      echo "default profile: $AWS_DEFAULT_PROFILE" 

    fi
  elif [ "$1" = "--unset" ]; then
    AWS_PROFILE=
    AWS_DEFAULT_PROFILE=
    # needed because of https://github.com/aws/aws-cli/issues/5016
    export -n AWS_PROFILE AWS_DEFAULT_PROFILE
  else
    # needed because of https://github.com/aws/aws-cli/issues/5546
    if ! aws configure list-profiles | ggrep --color=never -Fxq -- "$1"; then
      echo "$1 is not a valid profile"
      return 2
    else
      export AWS_PROFILE=$1 AWS_DEFAULT_PROFILE=$1
    fi;
  fi;
}


## ----------------------------------------------------------------
## AWS ENVIRONMENT VARS
## ----------------------------------------------------------------
# Qventus has a complicated set of AWS environment
# variables used to standardize its AWS deployments. 
# 
# Changing some of these can have difficult ramifications
# unless you know what you're doing. Where necessary, 
# the Security Team has added notes to explain some of
# the gotchas.  

# Truth be told, it's best if you do not monkey with 
#                        --- The QV Security Team 

# qv standards
if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws"
fi
export BT_CREDS="${HOME}/.aws/bt_creds"
export BT_CONFIG="${HOME}/.aws/bt_config"
export qv_gbl=us-west-2
export qv_start_url=https://qventus.awsapps.com/start

if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws" 
fi
[[ ! -f "${BT_CREDS}" ]] && {
  umask 0077
  cp "${BT}/config.d/bt_creds" \
     "${BT_CREDS}"
  umask 0022
}
 
aws_defaults () { 

  # For reliability, Bintools isolates its configs from the defaults.
  export AWS_CONFIG_FILE="${BT_CONFIG}"            \
         AWS_SHARED_CREDENTIALS_FILE=${BT_CREDS} \
         AWS_SDK_LOAD_CONFIG=1

  # aws-sso-credential-process 
  # when run on a headless system; credential_process captures 
  # stdout and stderr, so the URL and code that are printed out 
  # for use when the browser popup do not appear to the user.
  export AWS_SSO_INTERACTIVE_AUTH=true

  # for configuring the devops-sso-util credential process.
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_CONFIGURE_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_CONFIGURE_DEFAULT_REGION=${qv_gbl}

  export AWS_LOGIN_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_LOGIN_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_DEFAULT_REGION=${qv_gbl}
  export AWS_SSO_CREDENTIAL_PROCESS_DEBUG=true
  export AWS_SDK_LOAD_CONFIG=1   # for golang, terraform, e.g.
                                 # which do not use ~/.aws/config


# You should not need to touch these.
  export AWS_VAULT_PL_BROWSER=com.google.chrome 
  export AWS_DEFAULT_OUTPUT=json
  export AWS_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_REGION=${qv_gbl} 
  export AWS_REGION=${qv_gbl}

# ----------------------------------------------------------------
# variables that define the behavior of aws-vault backend secrets. 
# Qventus uses aws-vault to encrypt credentials at rest on laptops, 
# ecs, and ec2 hosts.  This is specifically to remove any long term 
# credentials stored in the clear on laptops, etc. 

# Lowest maintenance alternative is the 'file' option, which uses 
# encrypted flat files in the aws-vault file space.
# export AWS_VAULT_FILE_PASSPHRASE=(autogenerated-password)

# The autogenerated password frees you from the need to type 
# regular passwords to unlock your credentials.  Instead, a randomly 
# generated password is created with each 8h session, and loaded
# into this variable. This makes the password a 'throw-away' credential,
# not unlike the temporary session tokens deployed by AWS.

# Other useful var (not currently implemented).
# See flag: --backend
# AWS_VAULT_BACKEND=file
# See flags--prompt
# AWS_VAULT_PROMPT=terminal

# AWS_ROLE_ARN: ARN of IAM role in the active profile
# AWS_ROLE_SESSION_NAME: name of the role session in the active profile

# AWS_STS_REGIONAL_ENDPOINTS: must be "regional" or "legacy"
# AWS_MFA_SERIAL: id number of MFA device. We do not need this, as we 
#                 use Okta for MFA before Federated Authentication. 

# TTLs for sessions:
# AWS_SESSION_TOKEN_TTL:         8h
# AWS_CHAINED_SESSION_TOKEN_TTL: 1h
# AWS_ASSUME_ROLE_TTL:           1h 
# AWS_FEDERATION_TOKEN_TTL:     12h
# AWS_MIN_TTL:                   5m

# Comma separated key-value list of tags passed with the 
# AssumeRole call, overrides session_tags profile config variable.
# AWS_SESSION_TAGS: 

# Comma separated list of transitive tags. 
# Overrides transitive_session_tags profile config variable
# AWS_TRANSITIVE_TAGS: 

# We currently do not support the macos keychain or pass options
# for credential protection on the local host.  We might someday, 
# and if you really want them, you can manage your own configs. 

# AWS_VAULT_KEYCHAIN_NAME: Name of macOS keychain to use (see the flag --keychain)
# AWS_VAULT_PASS_PASSWORD_STORE_DIR: Pass password store directory (see the flag --pass-dir)
# AWS_VAULT_PASS_CMD: Name of the pass executable (see the flag --pass-cmd)
# AWS_VAULT_PASS_PREFIX: Prefix to prepend to the item path stored in pass (see the flag --pass-prefix)


}

aws_profile
aws_defaults


## ----------------------------------------------------------------
## AWS SETTINGS
## ----------------------------------------------------------------
# Save secrets history in ssm, via chamber. 
# once saved, create a new password, and then 
# migrate aws-vault creds to a new file.
# (There are only one or two per person.)
# Then change the password. Script should 
# log this in the background.
# 
aws_vault_rotate () {
  # generate new secret. 
  s=$(openssl rand -base64 40 | colrm 27)
  # update backend.
   
  # update secret.
  declare -x AWS_VAULT_FILE_PASSPHRASE=$s
} 


# Takes two args: quick or full. 
# Defaults to quick. 
#
aws_creds_regen () {

    :

}


# Profiles module
# ---------------
# This module uses the pipx install of devops-sso-util
# to automatically install the users credential profiles. 
# No other registration is needed, post setup. 

# helpers
get_account_number () { 
    jq -r --arg key ${1} '.accounts | 
                         to_entries[] | 
        select(.key == ($key)).value' \
     "${BT}/data/json/bt/accounts.json"
}

#function get_all_accounts();
#function get_all_guilds();

# role template
tpl='role_arn=arn:aws:iam::%s:role/%s'

# commands
cmd='devops-sso-util roles -r aws_team_ --no-header' 
prd='get_account_number'

# identity 490475191208 aws_team_arch arch
v=( $(${cmd} | grep -v master) $(${cmd} | grep -v master | cut -d'_' -f 3) )
echo "${v[3]}" > "${BT}/cache/team_info"

#debug_to prof echo prod: "${p[*]}"
p=( prod "$("${prd}" prod)" "qv-gbl-prod-${v[3]}" prod-"${v[3]}" ) 


# generate role chain profiles.
# -----------------------------

# sso
devops-sso-util configure profile --existing-config-action overwrite \
                                -a "${v[1]}" -r "${v[2]}" "${v[3]}" 

# team
devops-sso-util configure profile --existing-config-action overwrite \
              -c "source_profile=${v[3]}" --no-credential-process \
                      -c "$(printf "${tpl}" "${v[1]}" "${v[2]}")" \
                              -a "${v[1]}" -r "${v[2]}" "${v[2]}" 

# role
# identity 490475191208 aws_team_arch arch
devops-sso-util configure profile --existing-config-action overwrite \
              -c "source_profile=${v[2]}" --no-credential-process \
                 -c "$(printf "$tpl" "${p[1]}" "qv-gbl-${p[3]}")" \
                              -a "${v[1]}" -r "${v[2]}" "${p[3]}" 

# qventus
devops-sso-util configure profile --existing-config-action overwrite \
              -c "source_profile=${v[2]}" --no-credential-process \
                 -c "$(printf "$tpl" "${p[1]}" "qv-gbl-${p[3]}")" \
                              -a "${v[1]}" -r "${v[2]}" "qventus" 


# set default to 'qventus'
aws_profile qventus

# Run a quick profile login, for prod.
aws-whoami && echo -ne "\n\n" \
                       "---------------------------------------\n" \
                       "  SUCCESS! Happy clouding...    :0)    \n" \
                       "---------------------------------------\n" \



# NOTE: 
# -----
# All other accounts and profiles can be generated 
# in a single loop based on the info above. Teams 
# need only to be configured to access accounts in master. 

# TODO: use data/json/bt/accounts.json
# TODO: use data/json/bt/role_types.json (guilds)
#declare -a accounts
#declare -a guilds


# Generate role profiles.
# -----------------------
# team profiles - One per account. Format: '(team)-(account)' e.g.
#                 devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'role' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
# 
#declare -a rpf=()  # role profiles
#for p in ${rpf[@]}; do 
#  devops-sso-util configure profile --existing-config-action overwrite \
#               -c role_arn="$(printf "$tpl" "${rpf[1]}" "${rpf[2]}")" \
#                       -a "${v[1]}" -r "${rpf[2]}" "qv-gbl-${rpf[2]}" 
#done

# Generate guild profiles.
# ------------------------
# guild profiles - One per account. Format: '(team)-(account)' e.g.
#                  devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'guild' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
#
#declare -a rpf=()  # role profiles
#for g in ${gpf[@]}; do 
#  devops-sso-util configure profile --existing-config-action overwrite \
#               -c role_arn="$(printf "$tpl" "${pf[1]}" "${pf[2]}")" \
#                       -a "${v[1]}" -r "${pf[2]}" "qv-gbl-${pf[2]}" 
#done

                       
