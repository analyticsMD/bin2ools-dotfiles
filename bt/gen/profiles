#!/usr/bin/env /usr/local/bin/bash
# shellcheck disable=SC2148,SC2034
# -----------------------------------------------------------------

export BT="${HOME}/.bt"
. ${BT}/lib/utils.bash

# -----------------------------------------------------------------
# DEBUGGING
# -----------------------------------------------------------------

# global debug function.
to_debug()    { [[ "${BT_DEBUG}"    = *$1* ]] && >&2 "${@:2}" ;} || true

# uncomment while debugging.
#export BT_DEBUG="env lgin prof"

# shellcheck disable=SC1090,SC1094 

i=${#BASH_SOURCE[@]}
ver="$(echo "${BASH_VERSION}"             | \
       perl -nle 'print if s/(\d+)\..*/\1/')"
[[ "${ver}" -ne 5 ]] && { 
  echo "WARNING: unsupported shell spawned: ${BASH_VERSION}"
  return 1
} || true


# -----------------------------------------------------------------
# CACHE SETTINGS
# -----------------------------------------------------------------


to_debug flow && sleep 0.5 && echo "prof:cache" || true



# -----------------------------------------------------------------
# PATH SETTINGS
# -----------------------------------------------------------------


[[ ! -f "${BT}"/cache/path_info ]] && {
  "${BT}"/utils/path -s 2>/dev/null | tee "${BT}/cache/path_info"
}
source <(echo "$("${BT}"/utils/path -s 2>/dev/null)" )




# -----------------------------------------------------------------
# LIB SETTINGS
# -----------------------------------------------------------------



# load the proper sso-lib
export AWSLIB="devops"
# fall back to aws-sso-util when devops isn't available.
[[ ! -e "${DEFAULT_AWSLIB}" ]] && { 
    export AWSLIB="aws" 
    export DEFAULT_AWSLIB="${HOME}/.local/bin/${AWSLIB}-sso-util" 
} || true



# -----------------------------------------------------------------
# LOGIN SETTINGS
# -----------------------------------------------------------------


to_debug flow && sleep 0.5 && echo "prof:autologin"

#set_team || echo "${RED}FATAL${NC}: No Team set."

# Team account defaults to prod, for now.
export DEFAULT_ACCOUNT="prod"

[[ -z "${BT_ACCOUNT}" ]] && { export BT_ACCOUNT="${DEFAULT_ACCOUNT}" ;}
[[ -z "${BT_TEAM}"    ]] && export BT_TEAM="$(cat "${HOME}/cache/team_info")"
[[ -z "${BT_ROLE}"    ]] && export BT_ROLE="${BT_ACCOUNT}"-"${BT_TEAM}" 

autologin "${BT_ROLE}" || true

export DEFAULT_ROLE="${DEFAULT_ACCOUNT}-${BT_TEAM}"



## ----------------------------------------------------------------
## AWS SETTINGS
## ----------------------------------------------------------------
## Qventus has a lot of infrastructure in AWS. This library
## contains streamlined functions to make that environment
## is easy to work with. 

export BT="${HOME}/.bt"
source <( echo "$("${BT}"/utils/path -s 2>/dev/null)" )

${HOME}/.local/bin/${DEFAULT_AWSLIB} --help >/dev/null 2>&1
if echo $? >/dev/null 2>&1; then 
    echo -e client - ${GREEN}OK${NC}
fi


env_init

aws_profile prod-arch

aws_defaults prod-arch



# Profiles module
# ---------------
# This module uses the pipx install of aws-sso-util
# to automatically install the users credential profiles. 
# No other registration is needed, post setup. 

# helpers
get_account_number () { 
    jq -r --arg key ${1} '.accounts | 
                         to_entries[] | 
        select(.key == ($key)).value' \
     "${BT}/data/json/bt/accounts.json"
}

#function get_all_accounts();
#function get_all_guilds();

# role template
tpl='role_arn=arn:aws:iam::%s:role/%s'

# commands
prod_id="$(get_account_number prod)"
cmd="${DEFAULT_AWSLIB} roles -r aws_team_ --no-header " 


declare -a v=()
#acct_name="" acct_id="" team_sso="" this_team=""
while read -r acct_name acct_id team_sso; do 
    shopt -s lastpipe

    this_team="$(echo "${team_sso}" | cut -d'_' -f 3)"
    v=( "${acct_name}" "${acct_id}" "${team_sso}" "${this_team}" )
    acct_str="$(join_by \| "${v[@]}")" 

    # export each account string as pipe-delimited fields.
    export acct_str="${acct_str}"

    # returns: identity 490475191208 aws_team_arch arch
done <<< "$(${cmd} | grep -E '^identity' | head -n 1 )" 


# parse each account string into an array. 
# then create an array of arrays for looping
# through all multi-account descriptions. 
#
echo acct_str: "${acct_str}"
declare -a accounts=()
accounts+=( "${acct_str}" )
echo "accounts: ${#accounts[*]}"

declare -a this_acct=()
this_acct+=( $( echo "${acct_str}" | perl -pe 's/\|/ /g;') )
export acct_name="${this_acct[0]}"  acct_id="${this_acct[1]}" \
       team_sso="${this_acct[2]}"   this_team="${this_acct[3]}"



# ---------------------------- 
# cache the user's team info.
# ---------------------------- 

#set_team  && echo BT_TEAM: ${BT_TEAM}


# -----------------------------
# generate role chain profiles.
# -----------------------------

prod_id="$(get_account_number prod)"


# generate primary roles from a flat file template.
#
export this_team=${this_team} && \
    perl -pe "s/X__TEAM__X/${this_team}/g;" \
    ${BT}/gen/bt_seed > ${AWS_CONFIG_FILE}


# set our profile to the default.h
aws_profile ${BT_ROLE}



# generate roles for other accounts.
declare -a v=()
#acct_name="" acct_id="" team_sso="" this_team=""
while read -r acct_name acct_id team_sso; do 
    shopt -s lastpipe

    this_team="$(echo "${team_sso}" | cut -d'_' -f 3)"
    v=( "${acct_name}" "${acct_id}" "${team_sso}" "${this_team}" )
    acct_str="$(join_by \| "${v[@]}")" 

    # export each account string as pipe-delimited fields.
    export acct_str="${acct_str}"

    # returns: identity 490475191208 aws_team_arch arch
done <<< "$(${cmd} | grep -Ev '^identity' | head -n 1 )" 

echo acct_str: "${acct_str}"
declare -a accounts=()
accounts+=( "${acct_str}" )
echo "accounts: ${#accounts[*]}"


declare -a this_acct=()
this_acct+=( $( echo "${acct_str}" | perl -pe 's/\|/ /g;') )
export acct_name="${this_acct[0]}"  acct_id="${this_acct[1]}" \
       team_sso="${this_acct[2]}"   this_team="${this_acct[3]}"


for i in ${accounts[@]}; do  
    this_id="$(get_account_number ${this_acct})"


    declare -a this_acct=()
    this_acct+=( $( echo "${acct_str}" | perl -pe 's/\|/ /g;') )
    export acct_name="${this_acct[0]}"  acct_id="${this_acct[1]}" \
           team_sso="${this_acct[2]}"   this_team="${this_acct[3]}"

        # account role
        ${DEFAULT_AWSLIB} configure profile --existing-config-action overwrite \
                                   --role-name "${team_sso}" --non-interactive \
                      -c source_profile="${this_team}" --no-credential-process \
   -c role_arn="arn:aws:iam::${this_id}:role/qv-gbl-${this_acct}-${this_team}" \
                  -a "${this_id}" -r "${team_sso}" "${this_acct}-${this_team}" 

done



set default to new default 'prod-${BT_TEAM}'
aws_profile "${BT_ROLE}"

cat "${AWS_CONFIG_FILE}"
echo -ne "\n\n"

# Run a quick profile login, for prod.
aws-whoami && echo -ne "\n\n\n"
    


echo -ne            "---------------------------------------\n" 
echo -ne            "  ${GREEN}SUCCESS!${NC} Happy clouding...   ${PURPLE}:0)${NC} \n" 
echo -ne            "---------------------------------------\n" 


