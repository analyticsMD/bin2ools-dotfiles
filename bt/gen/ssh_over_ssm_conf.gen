#!/usr/bin/env /usr/local/bin/bash

# TODO: add fields: private_ip_address: public_ip_address

# TODO: write library functions
#       -- lib     - create lib dir, add to tools, and settings.
#       -- refresh - (func) unsets AWS_ session vars, then reruns 'sso'. 
#       -- sso     - if run without args, drops you to a shell with creds (or fails loudly)
#                  - if run with args, acts as a wrapper, passing request to a subshell.
#                  - checks current timestamp (see sso util) to see if we need to re-up.
#                  - if stale, or expired, creates new.  (Looks for running ecs credential agent)
#                  - loads 'AWS_' (separate routine) - gets these from 'settings' file.
#                  - loads  
source ${BT}/lib/bt_env  
#BT_DEBUG=yes

[[ -z "${BT_TEAM}" ]] && echo "FATAL: No TEAM var." && exit 1
requires_login prod_${BT_TEAM}

source ${BT}/sources/generate.d/inst_map.src

# regenerate inst_map array, if not present.
#
[[ "${#inst_map[@]}" -lt 2 ]] && {
  # Queries aws for a list of all instances.
  # Caches them as an associative array in a
  # local file in the generate.d dir.
  #
  cache_inst
  # creates: fully populated inst_map array.
  get_inst

}

debug env: $(env | grep AWS_)

INSTANCES="$(aws ec2 describe-instances \
    --filters Name=tag-key,Values=Name \
    --query 'Reservations[*].Instances[*].{
               Instance:InstanceId,
               Name:Tags[?Key==`Name`]|[0].Value,
               PrivAddr:PrivateIpAddress,
               KeyName:KeyName
           }' \
    --output json \
    --region us-west-2 | \
    jq -r '.[][] | 
              (.Name)+"|"+
              (.Instance)+"|"+
              (.PrivAddr)+"|"+
              (.KeyName)+"|"+
              (.PubAddr)' \
           )"

SRC="${BT}/config.d/ssh_over_ssm.conf"

[ ! -d "${BT}/sources/generate.d" ] && \
bt_log "FATAL: ${BT}/sources/generate.d does not exist." && die

cat ${BT}/inst/txt/bt_header               > $SRC
echo -ne "\n\n###  records found: " | tee -a $SRC
echo -ne "${INSTANCES}" | wc -l     | tee -a $SRC
echo -ne "\n\n"                     | tee -a $SRC

[ ! -d "${BT}/utils/gen" ] && \
bt_log "FATAL: ${BT}/utils/gen dir not found." && die

# print file.
while IFS="|" read -r name id private_ip key_name; do
  tee -a $SRC <<-EOF
  Host ${name}
    Hostname ${private_ip}
    ForwardAgent "yes"
    User "${USER}"
    IdentityFile ~/.ssh/${key_name}
    StrictHostKeyChecking no
    ProxyCommand sh -c "aws ssm start-session \
      --document-name AWS-StartSSHSession     \
      --parameters 'portNumber=22'            \
      --region ${region}                      \
      --target ${id}"

EOF
done< <(echo "${INSTANCES}" | tr -s ' ' _ | sort)

