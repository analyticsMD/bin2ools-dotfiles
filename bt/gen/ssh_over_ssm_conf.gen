#!/usr/bin/env /usr/local/bin/bash

# TODO: add fields: private_ip_address: public_ip_address

# TODO: write library functions
#       -- lib     - create lib dir, add to tools, and settings.
#       -- refresh - (func) unsets AWS_ session vars, then reruns 'sso'. 
#       -- sso     - if run without args, drops you to a shell with creds (or fails loudly)
#                  - if run with args, acts as a wrapper, passing request to a subshell.
#                  - checks current timestamp (see sso util) to see if we need to re-up.
#                  - if stale, or expired, creates new.  (Looks for running ecs credential agent)
#                  - loads 'AWS_' (separate routine) - gets these from 'settings' file.
#                  - loads  
domain="cluster-cum1rxsnisml.us-west-2.rds.amazonaws.com" 
DATA_DIR="${HOME}/.bt/data/json/aws"
export BT=${HOME}/.bt
. ${BT}/lib/utils.bash
#BT_DEBUG=yes

autologin 
echo .

INSTANCES="$(aws ec2 describe-instances \
    --filters Name=tag-key,Values=Name \
    --query 'Reservations[*].Instances[*].{
               Instance:InstanceId,
               Name:Tags[?Key==`Name`]|[0].Value,
               PrivAddr:PrivateIpAddress,
               KeyName:KeyName
           }' \
    --output json \
    --region "us-west-2" | \
             jq '[ .[] | INDEX(.Name) ]' | \
             tee "${DATA_DIR}/ssm.json")"
echo ..

CLUSTERS="$(cat ${DATA_DIR}/rds.json |  \
            jq '.[] | INDEX(.endpoint)' | perl -pe 's/\.\":/\":/g')"
echo ...


SRC="${BT}/cfg/ssh_over_ssm.conf"

#[ ! -d "${BT}/src" ] && \
#echo "FATAL: ${BT}/src does not exist." && die

cat ${BT}/inst/txt/bt_header               > $SRC
echo -ne "\n\n###  records found: " | tee -a $SRC
echo -ne "${INSTANCES}" | wc -l     | tee -a $SRC
echo -ne "\n\n"                     | tee -a $SRC

[ ! -d "${BT}/gen" ] && \
echo "FATAL: ${BT}/gen dir not found." && die

# print file.
[[ "${AWS_DEFAULT_REGION}" == "us=west-2" ]] && { 
    export AWS_DEFAULT_REGION=us-west-2
    export region="${AWS_DEFAULT_REGION}"
}

method=AWS-StartSSHSession 
parameters="portNumber=22"
echo ....
while IFS="|" read -r name id private_ip key_name; do
  echo Hi. 
  tee -a $SRC <<-EOF
  Host ${name}
    Hostname ${private_ip}
    ForwardAgent "yes"
    User "ec2-user"
    IdentityFile ~/.ssh/${key_name}
    StrictHostKeyChecking no
    ProxyCommand sh -c "aws ssm start-session \
      --document-name ${method}               \
      --parameters \'${parameters}\'          \
      --region ${region}                      \
      --target ${id}"

EOF

done< <(cat ${ssm_json} | jq -r)
echo .....

for k in "$(cat ${AWS_JSON}/rds.json         | \
   jq -r ' to_entries[].value                |
           to_entries[].value                |
           to_entries                        |
           map("\(.key)=\(.value|tostring)") | .[]')"; do
 
   # perl -pe 's/[\%\,\|,\..]//g')"; do 

  echo "got: $k"
  export "${k}"
  if [[ "${k}" !~ ^endpoint\= ]] && { 
      export "${k}" && continue
      method=AWS-StartPortForwardingSessionToRemoteHost
      parameters="portNumber=3306","localPortNumber=${port}","host=${endpoint}.${domain}"
   
      tee -a $SRC <<-EOF
      Host ${name}
      Hostname ${private_ip}
      ForwardAgent "yes"
      User "ec2-user"
      IdentityFile ~/.ssh/${key_name}
      StrictHostKeyChecking no
      ProxyCommand sh -c "aws ssm start-session \
        --document-name ${method}               \
        --parameters \'${parameters}\'          \
        --region ${region}                      \
        --target ${id}"
  EOF

done 

#cat ~/.bt/data/json/aws/rds.json | jq -r 'to_entries[].value | to_entries[].value | to_entries|map("\(.key)=\(.value|tostring)") | .[]' | perl -pe 's/[\%\,\|,\..]//g'
    
