#!/usr/bin/env /usr/local/bin/bash

## ----------------------------------------------------------------
## AWS SETTINGS
## ----------------------------------------------------------------
## Qventus has a lot of infrastructure in AWS. This library
## contains streamlined functions to make that environment
## is easy to work with. 
unset SOURCE_FILES
LOADER=legacy

# -----------------------------------------------------------------
# PATH UTIL
# -----------------------------------------------------------------

${HOME}/.bt/lib

source <(${HOME}/.bt/utils/path -s 2>/dev/null)
bt
echo PATH: "${PATH}"

# -----------------------------------------------------------------
# SHELL LOADER
# -----------------------------------------------------------------

# For loading associative arrays from files or variables.
export BT="${HOME}/.bt"
. "${BT}/lib/utils.bash"          >/dev/null 2>&1

{
    funcs="$(declare -F | grep -cv '\-f _')" && {
        echo -e "Loaded ${CYAN}${funcs}${NC} functions."
    }

} || true

{



# -----------------------------------------------------------------
  env | sort | grep AWS 
  echo -ne '\n\n'
  # -----------------------------------------------------------------
} >/dev/null 2>&1

# refresh your paths.
source <( echo "$("${BT}"/utils/path -s 2>/dev/null)" )


# Set and unset AWS_PROFILE.
# --------------------------
# Uses the 'aws configure list-profiles' command for 
# validation (also has auto-completion routines, which 
# are a bit slow).
#
aws_profile () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "USAGE:"
    echo "aws_profile              <- print out current value"
    echo "aws_profile PROFILE_NAME <- set PROFILE_NAME active"
    echo "aws_profile --unset      <- unset the env vars"
  elif [ -z "$1" ]; then
    if [ -z "$AWS_PROFILE$AWS_DEFAULT_PROFILE" ]; then
      echo "No profile is set"
      return 1
    else
      echo "current profile: $AWS_PROFILE"
      echo "default profile: $AWS_DEFAULT_PROFILE" 
    fi
  elif [ "$1" = "--unset" ]; then
    AWS_PROFILE=
    AWS_DEFAULT_PROFILE=
    # needed because of https://github.com/aws/aws-cli/issues/5016
    export -n AWS_PROFILE AWS_DEFAULT_PROFILE
  else
    profile="${1:-"qventus"}" 
    # needed because of https://github.com/aws/aws-cli/issues/5546
    if ! aws configure list-profiles | grep -q "$profile"; then
      echo "$profile is not a valid profile"
      return 2
    else
      export AWS_PROFILE=$profile AWS_DEFAULT_PROFILE=$profile
    fi;
  fi;
} > /dev/null 2>&1


## ----------------------------------------------------------------
## AWS ENVIRONMENT VARS
## ----------------------------------------------------------------
# Qventus has a complicated set of AWS environment
# variables used to standardize its AWS deployments. 
# 
# Changing some of these can have difficult ramifications
# unless you know what you're doing. Where necessary, 
# the Security Team has added notes to explain some of
# the gotchas.  

# It's best if you do not monkey with these.
#                        --- The QV Security Team 

# qv standards
if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws"
fi
export BT_CREDS="${HOME}/.aws/bt_creds"
export BT_CONFIG="${HOME}/.aws/bt_config"
export qv_gbl=us-west-2
export qv_start_url=https://qventus.awsapps.com/start

if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws" 
fi
[[ ! -f "${BT_CREDS}" ]] && {
  umask 0077
  cp "${BT}/cfg/bt_creds" \
     "${BT_CREDS}"
  umask 0022
}
 
aws_defaults () { 

  # For reliability, Bintools isolates its configs from the defaults.
  export AWS_CONFIG_FILE="${BT_CONFIG}"            \
         AWS_SHARED_CREDENTIALS_FILE=${BT_CREDS} \
         AWS_SDK_LOAD_CONFIG=1

  # aws-sso-credential-process 
  # when run on a headless system; credential_process captures 
  # stdout and stderr, so the URL and code that are printed out 
  # for use when the browser popup do not appear to the user.
  export AWS_SSO_INTERACTIVE_AUTH=true

  # for configuring the devops-sso-util credential process.
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_CONFIGURE_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_CONFIGURE_DEFAULT_REGION=${qv_gbl}

  export AWS_LOGIN_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_LOGIN_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_DEFAULT_REGION=${qv_gbl}
  export AWS_SSO_CREDENTIAL_PROCESS_DEBUG=true
  export AWS_SDK_LOAD_CONFIG=1   # fore golang, terraform, e.g.
                                 # which do not use ~/.aws/config

  # You should not need to touch these.
  export AWS_VAULT_PL_BROWSER=com.google.chrome 
  export AWS_DEFAULT_OUTPUT=json
  export AWS_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_REGION=${qv_gbl} 
  export AWS_REGION=${qv_gbl}

} >/dev/null 2>&1

aws_defaults
aws_profile


# Profiles module
# ---------------
# This module uses the pipx install of devops-sso-util
# to automatically install the users credential profiles. 
# No other registration is needed, post setup. 

# helpers
get_account_number () { 
    acct="${1:-prod}"
    jq -r --arg key "${acct}" ' .accounts  | 
                              to_entries[] | 
             select(.key == ($key)).value' \
          "${BT}/data/json/bt/accounts.json"
}



#function get_all_accounts();
#function get_all_guilds();

# multiiple line output - shows all accounts, one per line.
# It also shows a spurious 'master' record, which we filter. 
# Also note:  This DOES NOT give any info about prod; 
# Only SSO accounts. 
export AWSLIB=devops
export DEFAULT_AWS_LIB="${AWSLIB}-sso-util"


# example: identity   111122223333  aws_team_<team>  <acct>-<team> 
#          ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^
#          acct_name  account_id    sso team name     acct + team

declare -a account_records=()
roles+=( "$("${DEFAULT_AWS_LIB}" roles -r aws_team_ --no-header)" )

declare -a i=()
declare -a rec=()
declare -a to_process=()
echo -en "RECORDS: ${#roles[@]}\n"

# parse a line of output from 'aws-sso-util roles'
    # command looks like: "devops-sso-util roles | grep aws_team_"
    # output line format:
    #     identity     490475191208 aws_team_arch
    #     qaplatform   566193147577 aws_team_arch

    get_account_number

parse_records() { 
    n=1 i=1
    while ($n < "${#@}" ); do
        args=( "${[@]:(( n++ )):1}" "${[@]:(( n++ )):1}" "${[@]:(( n++ )):1}" )
        acct_name="$i[0]"
        acct_id="$(get_account_number qaplatform )"
        team_name="$(echo "$i[2]"|cut -d'_' -f 3)"    # Derived elements.         
        team_sso="aws_team_${team_name}"           # ...   
        echo foo: "${acct_name}" "${acct_id}" "${team_sso}" "${team_name}"
    
        [[ "${i[@]}" =~ master ]] && continue 
        [[ -n "${a[@]}" ]] && echo "FATAL: Bad record parse." && exit 1
        #to_debug prof && echo "${team_name}" 
        echo "${team_name}" > "${BT}/cache/team_info"
        #[[ "$#@" -gt 0 ]] && recurse "${@:4}"
    done
}    


lines() {

    n=1
    while ($n+3 < "${#@}" ); do
        i=( "${[@]:(( n++ )):1}" "${[@]:(( n++ )):1}" "${[@]:(( n++ )):1}" )
        acct_name="$i[0]"
        acct_id="$i[1]"
        team_name="$(echo "$i[2]"|cut -d'_' -f 3)"    # Derived elements.         
        team_sso="aws_team_${team_name}"           # ...   
        echo "${acct_name}" "${acct_id}" "${team_sso}" "${team_name}"
    
        [[ "${i[@]}" =~ master ]] && continue 
        [[ -n "${a[@]}" ]] && echo "FATAL: Bad record parse." && exit 1
        #to_debug prof && echo "${team_name}" 
        echo "${team_name}" > "${BT}/cache/team_info"
        #[[ "$#@" -gt 0 ]] && recurse "${@:4}"
    done

}


for i in  "${account_records[@]}"; do
    [[ "${line}" =~ master ]] && continue  # skip master acct

    # example record: 
    # -------------------------------------------------------
    # identity   111122223333  aws_team_<team>  <acct>-<team> 
    # ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^
    # acct_name    acct_id     sso team name     acct + team

    # Here, we build the user's team identity from their 
    # group affiliation with Okta. We do not need to query
    # Okta directly, since the same identity info is also 
    # shared directly with AWS.  Okta is the authority, 
    # however.  Since the user's <team> doesn't change, 
    # we cache this value locally. This record has a slightly
    # different format in the 4th element.
  [[ "${line}" =~ identity ]] && { 
      i="$(parse_records ${line})"
      i+=( "identity" "${acct_id}" "${team_sso}" "${team_name}" )
      continue           # handle this record specially.
  }


  rec=( "$( printf '%s %s %s' "${[@]}" )" ) # 1st three elements.
  team_name="$(${line}|cut -d'_' -f 3)"     # Derived elements.         
  sso_name="aws_team_${team_name}"          # ...   
  acct_name="${rec[0]}"                     # ...   
  acct_id="${rec[1]}"                       # ...   
  role_name="${acct_name}-${team_name}"     # Final element.

  rec=( "${acct_name}" "${acct_id}"       \
        "${sso_name}"  "${role_name}"     )  # 4 elements in total. 

  [[ -z "${acct_name}" || \
     -z "${sso_name}"  || \
     -z "${acct_name}" || \
     -z "${team_name}" ]] && { 
     echo "FATAL: Error in fetching your roles from AWS."
     echo "See your DEVOPS admin."
     exit 1
  } 

  r="$(join_by \| "${acct_name}" "${acct_id}" "${sso_name}" "${role_name}" )"
  echo r: "${r}"
  #to_debug prof && echo rec: "${rec[@]}"     # complete record.

  # We then make a list of all account records, and will 
  # add these last, since eventually the list will grow 
  # quite long.
  to_process+=( "${rec[@]}" ) # multiple records here, 
                              # one per acct.
  echo account records to process: "${#to_process[@]}"
done   

echo 2p: "${#to_process[@]}"
echo  i: "${i[@]}"

# Generate role chain profiles.
# -----------------------------
# These three records create the shared profiles needed for 
# role chaining between the identity account (where poeple
# first authenticate) and either prod, or the other SSO 
# accounts. (Note that prod is IAM, due to legacy.)

# role template
acct_id="$(get_account_number prod)"

# --------------------------------------------------------
# First, we hard code prod since it is the only exception. 
# --------------------------------------------------------
acct_name="prod"    acct_id="$(get_account_number prod)"
team_sso="${i[2]}"  team_name="${i[3]}"
role_name="${acct_name}-${team_name}"
role_arn="$(printf 'arn:aws:iam::%s:role/%s'    \
         "${acct_id}" "qv-gbl-prod-${team_name}")" 
#                              ^  ^   ^    ^
#                              |  |   |    |
# NOTE: All roles follow the same convention: 
# ---------------------------------------------
# 'qv' is the org; 'gbl' stands for 'global'as opposed 
# to regional.  Next is the account name, 'prod', in 
# this case. And finally, the name of the team using 
# the access.

# Write a profile.  Here we use Ben Kehoe's aws-sso-util 
# library to generate the profiles in our ~/.aws/bt_config 
# file. Simply by rerunning this script, we can regenerate 
# our profiles at any time in a standardized way. 

"${DEFAULT_AWS_LIB}" configure profile         \
       --existing-config-action overwrite      \
       --non-interactive                       \
       --no-credential-process                 \
       --role-name="${team_sso}"               \
       -c "role_arn=${role_arn}"               \
       -c "source_profile=${team_sso}"         \
       -a "${acct_id}" "prod-${team_name}" 
  
# ----------------------------------------------------------
# Done with prod.
# ----------------------------------------------------------

# These next two roles are based in the identity account. 
# They receive source profile requests on behalf of all 
# other account roles, and control all movements into and
# out of other accounts.  To avoid complexity, we use a 
# 'fan-in' structure for RBAC.  Hence, we need to declare 
# these only once, for use by all other roles and accounts.
# The PRIMARY role for this team's use in authenticating 
# is the SSO role.  NOTE that this is the only role which 
# has a credential_process defined.  That is because it is
# used to authenticate all other chained roles for the team.

# --------
# sso role
# -------- 
acct_name="identity" acct_id="$(get_account_number ${acct_name})"
team_sso="${i[2]}"   team_name="${i[3]}"
role_arn="$(printf 'arn:aws:iam::%s:role/%s' \
            "${acct_id}"  aws_team_"${team_name}" )"         
role_name=aws_team_"${team_name}"                      \

# write to file. 
"${DEFAULT_AWS_LIB}" configure profile                 \
    credential_process="${DEFAULT_AWS_LIB}             \
    credential-process --profile ${team_name}"         \
    --existing-config-action overwrite                 \
    --non-interactive                                  \
    -r "${role_name}"                                  \
    -a "${acct_id}"                                    \
    -c role_arn="${role_arn}"   
    #"${team_name}"            


# -----------
# bridge role
# ----------- 

# This role is used to bridge the hop to prod, which 
# is IAM based, hence the special requirement.

acct_name="identity" acct_id="$(get_account_number ${acct_name})"
team_sso="${i[2]}"   team_name="${i[3]}"
role_arn="$(printf 'arn:aws:iam::%s:role/%s' \
            "${acct_id}"  aws_team_"${i[3]}" )"         
role_name="${acct_name}-${team_name}"

"${DEFAULT_AWS_LIB}" configure profile               \
    --existing-config-action overwrite              \
    --no-credential-process                         \
    --non-interactive                               \
    -c source_profile="${team_name}"                \
    -c role_arn="${role_arn}"                       \
    -a "${acct_id}" -r "${role_name}" "${team_sso}" 



# Now we loop through all remaining accounts.
# Creating a role for each. 

  # example record: 
  # -------------------------------------------------------
  # identity   111122223333  aws_team_<team>  <acct>-<team> 
  # ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^
  # acct_name    acct_id     sso team name     acct + team



  for (( i=0; i++; i < ${#to_process[@]} )); do
    rec=( "${to_process[$i]}" )
    echo i: $i rec: ${rec[@]}
    acct_name="${rec[0]}" acct_id="${rec[1]}"
    team_sso="${rec[2]}"  team_name="${rec[3]}"
    role_arn="$(printf 'arn:aws:iam::%s:role/%s' "${acct_id}" \
                          qv-gbl-"${acct_name}"-"${team_name}" )"         
    role_name="${acct_name}-${team_name}"

  "${DEFAULT_AWS_LIB}" configure profile             \
      --existing-config-action overwrite             \
      --no-credential-process                        \
      --non-interactive                              \
      -c source_profile="${team_sso}"                \
      -c role_arn="${role_arn}"                      \
      -a "${acct_id}" -r "${team_sso}" "${role_name}"

  done  

# ---------------------------------------------------------
# DEFAULT ROLE - qventus
# ---------------------------------------------------------

# NOTE: Qventus is a default account, used for generic logins.
#       It mostly uses the prod template.

    #acct_name="prod" acct_id="$(get_account_number "${acct_name}")"
    acct_name="prod" acct_id="566193147577"
    team_sso="${rec[2]}"  team_name="${rec[3]}"
    role_arn="$(printf 'arn:aws:iam::%s:role/%s' "${acct_id}" \
                                  ${acct_name}-"${team_name}" )"         


# qventus
${DEFAULT_AWS_LIB} configure profile                                 \
                  --existing-config-action overwrite                \
                  --no-credential-process                           \
                  --non-interactive                                 \
                  -c source_profile="qventus"                   \
                  -c role_arn="${role_arn}"                         \
                  -a "${acct_id}" -r "${team_sso}" "qventus" 


    acct_name=$(get_account_number qaplatform)

# ---------------------------------------------------------
# new account - qaplatform
# ---------------------------------------------------------

    acct_name="qaplatform" acct_id="$(get_account_number "qaplatform")"
    team_sso="${rec[2]}"  team_name="arch" 
    role_arn="$(printf 'arn:aws:iam::%s:role/%s' "${acct_id}" \
            qa-gbl-qaplatform-arch   ${acct_name}-"${team_name}" )"         

# qventus
${DEFAULT_AWS_LIB} configure profile                                     \
                  --existing-config-action overwrite                     \
                  --no-credential-process                                \
                  -c source_profile="aws_sso_utils"                      \
                  -c role_arn="${role_arn}"                              \
                  -a "566193147577" -r "aws_team_arch" "qaplatform-arch" 






# Done with profile creation. 


# set default to 'qventus'
aws_profile qventus

# Run a quick profile login, for prod.
${HOME}/.local/bin/aws-whoami && echo -ne "\n\n" \
           "---------------------------------------\n" \
           "  SUCCESS! Happy clouding...    :0]    \n" \
           "---------------------------------------\n" \



# TODO: use data/json/bt/accounts.json
# TODO: use data/json/bt/role_types.json (guilds)
#declare -a accounts
#declare -a guilds

# Generate role profiles.
# -----------------------
# team profiles - One per account. Format: '(team)-(account)' e.g.
#                 devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'role' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
# 
#declare -a rpf=(cnc qaplatform)  # role profiles
#for p in "${rpf[@]}"; do 
#  aws-sso-util configure profile --existing-config-action keep \
#        -c role_arn="$(printf "$tpl" "${rpf[1]}" "${rpf[2]}")" \
#      -a "${v[1]}" -r "${rpf[2]}" "qv-gbl-${rpf[2]}" "${rpf[3]}" 
#done


# Generate guild profiles.
# ------------------------
# guild profiles - One per account. Format: '(team)-(account)' e.g.
#                  devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'guild' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
#
#declare -a rpf=()  # role profiles
#for g in ${gpf[@]}; do 
#  devops-sso-util configure profile --existing-config-action overwrite \
#               -c role_arn="$(printf "$tpl" "${pf[1]}" "${pf[2]}")" \
#                       -a "${v[1]}" -r "${pf[2]}" "qv-gbl-${pf[2]}" 
#done


