#!/usr/bin/env /usr/local/bin/bash

## ----------------------------------------------------------------
## AWS SETTINGS
## ----------------------------------------------------------------
## Qventus has a lot of infrastructure in AWS. This library
## contains streamlined functions to make that environment
## is easy to work with. 

# -----------------------------------------------------------------
# SHELL LOADER
# -----------------------------------------------------------------

# For loading associative arrays from files or variables.

export BT="${HOME}/.bt"

# Static libs.  No globbing.  Anything else was too brittle.

. "${BT}/lib/bt.bash"             >/dev/null 2>&1
. "${BT}/lib/utils.bash"          >/dev/null 2>&1
. "${BT}/lib/env.bash"            >/dev/null 2>&1
. "${BT}/lib/api.bash"            >/dev/null 2>&1
. "${BT}/lib/rdslib.bash"         >/dev/null 2>&1
#source <( "${BT}/lib/bridge.bash" 2>/dev/null )

{
    funcs="$(declare -F | grep -v '\-f _' | wc -l )" && {
        echo -e "Loaded ${CYAN}${funcs}${NC} functions."
    }

} || true

{
  # -----------------------------------------------------------------
  env | sort | grep AWS 
  echo -ne '\n\n'
  # -----------------------------------------------------------------
} >/dev/null 2>&1

# refresh your paths.
source <( echo "$("${BT}"/utils/path -s 2>/dev/null)" )


# Set and unset AWS_PROFILE.
# --------------------------
# Uses the 'aws configure list-profiles' command for 
# validation (also has auto-completion routines, which 
# are a bit slow).
#
aws_profile () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "USAGE:"
    echo "aws_profile              <- print out current value"
    echo "aws_profile PROFILE_NAME <- set PROFILE_NAME active"
    echo "aws_profile --unset      <- unset the env vars"
  elif [ -z "$1" ]; then
    if [ -z "$AWS_PROFILE$AWS_DEFAULT_PROFILE" ]; then
      echo "No profile is set"
      return 1
    else
      echo "current profile: $AWS_PROFILE"
      echo "default profile: $AWS_DEFAULT_PROFILE" 
    fi
  elif [ "$1" = "--unset" ]; then
    AWS_PROFILE=
    AWS_DEFAULT_PROFILE=
    # needed because of https://github.com/aws/aws-cli/issues/5016
    export -n AWS_PROFILE AWS_DEFAULT_PROFILE
  else
    profile="${1:-"qventus"}" 
    # needed because of https://github.com/aws/aws-cli/issues/5546
    if ! aws configure list-profiles | grep -q "$profile"; then
      echo "$profile is not a valid profile"
      return 2
    else
      export AWS_PROFILE=$profile AWS_DEFAULT_PROFILE=$profile
    fi;
  fi;
} > /dev/null 2>&1


## ----------------------------------------------------------------
## AWS ENVIRONMENT VARS
## ----------------------------------------------------------------
# Qventus has a complicated set of AWS environment
# variables used to standardize its AWS deployments. 
# 
# Changing some of these can have difficult ramifications
# unless you know what you're doing. Where necessary, 
# the Security Team has added notes to explain some of
# the gotchas.  

# Truth be told, it's best if you do not monkey with 
#                        --- The QV Security Team 

# qv standards
if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws"
fi
export BT_CREDS="${HOME}/.aws/bt_creds"
export BT_CONFIG="${HOME}/.aws/bt_config"
export qv_gbl=us-west-2
export qv_start_url=https://qventus.awsapps.com/start

if [ ! -f "${HOME}/.aws" ]; then
  mkdir -p "${HOME}/.aws" 
fi
[[ ! -f "${BT_CREDS}" ]] && {
  umask 0077
  cp "${BT}/cfg/bt_creds" \
     "${BT_CREDS}"
  umask 0022
}
 
aws_defaults () { 

  # For reliability, Bintools isolates its configs from the defaults.
  export AWS_CONFIG_FILE="${BT_CONFIG}"            \
         AWS_SHARED_CREDENTIALS_FILE=${BT_CREDS} \
         AWS_SDK_LOAD_CONFIG=1

  # aws-sso-credential-process 
  # when run on a headless system; credential_process captures 
  # stdout and stderr, so the URL and code that are printed out 
  # for use when the browser popup do not appear to the user.
  export AWS_SSO_INTERACTIVE_AUTH=true

  # for configuring the devops-sso-util credential process.
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_CONFIGURE_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_CONFIGURE_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_CONFIGURE_DEFAULT_REGION=${qv_gbl}

  export AWS_LOGIN_SSO_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_LOGIN_SSO_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_SSO_START_URL=${qv_start_url} 
  export AWS_DEFAULT_SSO_REGION=${qv_gbl}
  export AWS_DEFAULT_REGION=${qv_gbl}
  export AWS_SSO_CREDENTIAL_PROCESS_DEBUG=true
  export AWS_SDK_LOAD_CONFIG=1   # for golang, terraform, e.g.
                                 # which do not use ~/.aws/config

  # You should not need to touch these.
  export AWS_VAULT_PL_BROWSER=com.google.chrome 
  export AWS_DEFAULT_OUTPUT=json
  export AWS_DEFAULT_SSO_REGION=${qv_gbl} 
  export AWS_DEFAULT_REGION=${qv_gbl} 
  export AWS_REGION=${qv_gbl}

} >/dev/null 2>&1

aws_defaults
aws_profile


# Profiles module
# ---------------
# This module uses the pipx install of devops-sso-util
# to automatically install the users credential profiles. 
# No other registration is needed, post setup. 

# helpers
get_account_number () { 
    acct="${1:-prod}"
    jq -r --arg key ${acct} ' .accounts  | 
                            to_entries[] | 
           select(.key == ($key)).value' \
        "${BT}/data/json/bt/accounts.json"
}

#function get_all_accounts();
#function get_all_guilds();

# multiiple line output - shows all accounts, one per line.
# It also shows a spurious 'master' record, which we filter. 
# Also note:  It DOES NOT give any info about prod. 
# Only SSO accounts. 
export AWSLIB=devops
export DEFAULT_AWS_LIB="${AWSLIB}-sso-util"
account_records="$("$(which ${DEFAULT_AWSLIB})" \
                  roles -r aws_team_ --no-header)"
echo -en "RECORDS:\n ${account_records}\n"


# example: identity   111122223333  aws_team_arch  <acct>-<team> 
#          ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^  ^ ^ ^ ^ ^ ^ ^
#          acct_name  account_id    sso team name   acct + team

declare -a v=()
declare -a rec=()
declare -a to_process=()
declare -a account_records=()

for line in ${account_records}; do
  [[ "${line}" =~ master ]] && { continue ;} 
  rec="$( printf '%s %s %s' "${line}" )"
  team_name="$(${line}|cut -d'_' -f 3)"
  to_debug prof && echo rec: ${rec[@]} $team_name
  v=( ${rec[@]} ${team_name} )  # 4 elements in total. 
  [[ "${line}" =~ identity ]] && { 
      to_debug prof && echo "${v[3]}"  # identity.
      to_debug prof && echo "${v[3]}" > "${BT}/cache/team_info"
  }
  # now we can keep going. Process all 
  # additional account records (except prod
  # which is non-sso). 
  to_process+=( "${v[@]}" ) 
  echo count: "${#to_process[@]}"
done   


# example: identity   111122223333  aws_team_arch  <acct>-<team> 
#          ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^  ^ ^ ^ ^ ^ ^ ^
#          acct_name  account_id    sso team name   acct + team


# generate role chain profiles.
# -----------------------------


# role template
tpl='role_arn=arn:aws:iam::%s:role/%s'
acct_id="$(get_account_number prod)"

# --------------------------------------------------------
# First, we hard code prod since it is the only exception. 
# --------------------------------------------------------
acct_name="prod"    acct_id="$(get_account_number prod)"
team_sso="${v[2]}"  team_name="prod-${v[3]}"
role_arn="$(printf 'arn:aws:iam::%s:role/%s' \
         "$(echo "${acct_id}" "qv-gbl-prod-${team_name}")")" 

# role template
declare -a p=()
p+=( "prod" "${acct_id}" "qv-gbl-prod-${v[3]}" "prod-${v[3]}" )
to_debug prof && echo prod: "${p[@]}"

# internal profile
"${DEFAULT_AWSLIB}" configure profile         \
       --existing-config-action overwrite     \
       --non-interactive                      \
       --no-credential-process                \
       -c "role_arn=${role_arn}"              \
       -c "source_profile=${team_sso}"        \
       -a "${acct_id}" -r "${team_sso}" "prod-${team_name}" 
  


# These fist two role accounts are based in identity account. 
# They receive source profile requests on behalf of all 
# other account roles.  Kind of a 'fan-in' structure.  
# Hence, we need to declare each only once.


# team
  declare -a v=()
  "${to_process[0]}"
  for V in "$("${v[@]}" | \
            perl -pe 's/\s*\|\s*/\n/g')"; do v+=( "${V}" ); done  

  acct_name="${v[0]}"     acct_id="${v[1]}"
  team_sso="${v[2]}"    team_name="${v[3]}"
  role_arn="$(printf 'arn:aws:iam::%s:role/%s'       \
           "$("${v[1]}" aws_team_"${v[3]}" )")"         

  "${DEFAULT_AWSLIB}" configure profile              \
      --existing-config-action overwrite             \
      --no-credential-process                        \
      --non-interactive                              \
      -c source_profile="${v[2]}"                    \
      -c role_arn="${role_arn}"                      \
      -a "${v[1]}" -r "${v[2]}" "${v[3]}"            \


# sso
acct_name="${v[0]}"     acct_id="${v[1]}" 
team_sso="${v[2]}"    team_name="${v[3]}"
role_arn="$(printf 'arn:aws:iam::%s:role/%s'         \
         "$("${v[2]}" aws_team_"${v[3]}")")"         

declare -a v=()
"${to_process[1]}"
for V in "$("${v[@]}" | \
          perl -pe 's/\s*\|\s*/\n/g')"; do v+=( $V ); done  

  "${DEFAULT_AWSLIB}" configure profile                  \
      credential_process="${DEFAULT_AWSLIB}"             \
      credential-process --profile "${v[2]/aws_team_//}" \
      --existing-config-action overwrite                 \
      --non-interactive                                  \
      -c role_arn="${role_arn}"                          \
      -a "${v[1]}" -r "${v[2]}" "${v[2]}"            


# Now we loop through all remaining accounts.
# Creating a role for each. 


# example: identity   111122223333  aws_team_arch  <acct>-<team> 
#          ^ ^ ^ ^     ^ ^ ^ ^ ^    ^ ^ ^ ^ ^ ^ ^  ^ ^ ^ ^ ^ ^ ^
#          acct_name  account_id    sso team name   acct + team
#            v[0]       v[1]            v[2]          v[3]


# role template
tpl='role_arn=arn:aws:iam::%s:role/%s'

# other account roles to process.
declare -a v=()
for i in $(echo ${to_process[@:2]}| \
           perl -le 's/\s+/\n/g'); do v+=( "${i}" ) 

acct_name="${v[0]}"     acct_id="${v[1]}"
team_sso="${v[2]}"    team_name="${v[3]}"

echo ${AWSLIB_DEFAULT} configure profile \
      --existing-config-action overwrite \
                 --no-credential-process \
         -c source_profile="${team_sso}" \
   -c role_arn='arn:aws:iam::%s:role/%s' \
      "qv-gbl-${acct_name}-${team_name}" \
      -a                    "${acct_id}" \
      -r                  "${acct_name}" \
            "${acct_name}-${team_name}" 

# role template

done


# NOTE: Qventus is a default account, used for generic logins.
#       It mostly uses prod stats.

# qventus
${AWSLIB_DEFAULT} configure profile                                 \
                  --existing-config-action overwrite                \
                  --no-credential-proces                            \
                  -c source_profile="${v[2]}"                       \
                  -c role_arn="$(printf 'arn:aws:iam::%s:role/%s')" \
                  -c "${p[1]}" "qv-gbl-prod-qventus)"               \
                  -a "${v[1]}" -r "${v[2]}" "qventus" 


# set default to 'qventus'
aws_profile qventus

# Run a quick profile login, for prod.
aws-whoami && echo -ne "\n\n" \
           "---------------------------------------\n" \
           "  SUCCESS! Happy clouding...    :0]    \n" \
           "---------------------------------------\n" \



# TODO: use data/json/bt/accounts.json
# TODO: use data/json/bt/role_types.json (guilds)
#declare -a accounts
#declare -a guilds

# Generate role profiles.
# -----------------------
# team profiles - One per account. Format: '(team)-(account)' e.g.
#                 devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'role' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
# 
#declare -a rpf=(cnc qaplatform)  # role profiles
#for p in "${rpf[@]}"; do 
#  aws-sso-util configure profile --existing-config-action keep \
#        -c role_arn="$(printf "$tpl" "${rpf[1]}" "${rpf[2]}")" \
#      -a "${v[1]}" -r "${rpf[2]}" "qv-gbl-${rpf[2]}" "${rpf[3]}" 
#done


# Generate guild profiles.
# ------------------------
# guild profiles - One per account. Format: '(team)-(account)' e.g.
#                  devops-cnc, devops-qa, devops-demo, etc.
# NOTE: These are all assumable roles in the 'guild' step of the 
#       qventus standard role chain, e.g. sso->team->role->guild
#
#declare -a rpf=()  # role profiles
#for g in ${gpf[@]}; do 
#  devops-sso-util configure profile --existing-config-action overwrite \
#               -c role_arn="$(printf "$tpl" "${pf[1]}" "${pf[2]}")" \
#                       -a "${v[1]}" -r "${pf[2]}" "qv-gbl-${pf[2]}" 
#done
                       
