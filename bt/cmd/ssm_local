#!/usr/bin/env bash
# shellcheck shell=bash disable=SC1083 format=SC1083

LOADER=legacy
export BT="${HOME}/.bt"
. "${BT}/lib/utils.bash"

export LOADER=legacy

. ${HOME}/.bt/lib/utils.bash

# no need to source configs, when
# we are running as a standalone app.
#env_init
set_team 

export DEFAULT_ACCOUNT="prod"
export DEFAULT_ROLE="${DEFAULT_ACCOUNT}-${BT_TEAM}"
[[ -z "${BT_ACCOUNT}" ]] && { export BT_ACCOUNT="${DEFAULT_ACCOUNT}" ;}


# fall back to aws-sso-util when devops isn't available.
export AWSLIB="devops"
[[ ! -e "${HOME}/.local/bin/${AWSLIB}-sso-util}" ]] && {
    export AWSLIB="aws"
    export DEFAULT_AWSLIB="${AWSLIB}-sso-util"
}

[[ ! -f "${BT}"/cache/path_info ]] && {
  "${BT}"/utils/path -s 2>/dev/null | tee "${BT}/cache/path_info"
}
source <(echo "$("${BT}"/utils/path -s 2>/dev/null)" )
autologin 

hn="${1:-}" #echo hn: ${hn}
[[ "${hn}" == '' ]] && unset "${hn}"

[[ ! -e "${SSM_JSON}" ]] && { unset SSM_JSON ;}

if [[ -z "${SSM_JSON}" ]]; then 
    export SSM_JSON="${HOME}/.bt/data/json/aws/ssm.json"
elif [[ "${BT_LAUNCH_DIR}/data/json/aws/ssm.json" ]]; then
    export SSM_JSON="${BT_LAUNCH_DIR}/.bt/data/json/aws/ssm.json" 
else 
  echo "FATAL: Could not find ssm.json map" && exit 1
fi

echo "ssm.json file: ${SSM_JSON}"
host=NONE id=NONE cmd=NONE ip=NONE 

declare -a tmp
[ -n "${hn}" ] && {  
    mapfile tmp -t < <(                                      \
        jq -r --arg hn "$hn"                                 \
            '.[][]|select (.Name == $hn)
                  | .Name,.Instance,.PrivAddr' < ${SSM_JSON} 
    )
} || { 
    # use fuzzy matching if no host is supplied.
    ip="$("${HOME}"/.local/bin/aws-fuzzy --ip-only)" 
    mapfile tmp -t < <(                                      \
        jq -r --arg ip "$ip"                                 \
            '.[][]|select (.PrivAddr == $ip)
                  | .Name,.Instance,.PrivAddr' < ${SSM_JSON} 
    )
}

host="${tmp[0]}" id="${tmp[1]}" ip="${tmp[2]}"
echo -en connecting to: \"${CYAN}${host}${NC}\"
cmd="aws ssm start-session --target ${id}"
#echo using cmd: ${cmd}

${cmd}
