#!/usr/bin/env /usr/local/bin/bash

# shellcheck shell=bash disable=SC2148

#BT_DEBUG=yes

# TODO: These static arrays need to be added to json
#       configurations stored in ssm, or more likely
#       in ConsoleMe... 
#
declare -a role_types=(    role_types                \
                                        primary      \
                                        delegated    \
                                        unrestricted \
                                        restricted   \
                                        guild        \
)
declare -a primary=(   primary                       \
                                        admin        \
                                        arch         \
                                        sec          \
                                        devops       \
)
declare -a delegated=(    delegated                  \
                                        int          \
                                        ds           \
                                        dp           \
                                        app          \
                                        qa           \
)
declare -a unrestricted=(  unrestricted              \
                                        identity     \
                                        prod         \
                                        cnc          \
                                        demo         \
                                        qa           \
                                        dev          \
                                        devdata      \
)
declare -a restricted=(   restricted                 \
                                        dns          \
                                        master       \
                                        audit        \
                                        security     \
)
declare -a guild=(         guild                     \
                                        cicd         \
                                        terraform    \
                                        helm         \
                                        dba          \
                                        ml           \
                                        ssm          \
)



# Globbing
# --------
# Advanced globbing is an easy way to sort through files.
# But we need to Keep tabs on whether a particular glob was
# originally set.  We should only toggle the setting if
# originally not set.
#
shopt -s extglob
shopt -s nullglob
shopt -s dotglob
shopt -s nocasematch

# NOTE:
# -----
# Does not preserve indices or work with sparse arrays.
# Element 0 in each array is the array name, 
# used for pass-by-reference. 
#
# examples:
# ---------
# find_in role_primary sec
#
# shellcheck disable=SC2068,SC2086
find_in() { 
  declare -n a=${1} && . <( "${a[@]@A}")
  s=${2:-"_"} && name=${1:-"accounts"}
  [[ $s == '_' ]] && for e in ${a[@]:1}; do echo $e; done && return 0
  [[ "${a[*]:2}" = "${s}" ]] && echo ${s} || echo -ne ""
}

# USAGE
# -----

# find_in role_types _
# produces full list if "_" is given as arg 2.

# prints match if a match is found.
# find_in role_types delegated

# prints nothing if no match is found.
# find_in role_types foobar


# TODO:
# -----
# This is a library of things that should go away. 
#
# These constants should all be generated by AWS calls.
# The iDP provider should be the source of truth for Bintools. 
#
# source only once per shell

# current flow is...
# (ENV vars)> vars_to_json > json_object > encode | decode > apply_env 

# NOTE: 
# -----
# Does not preserve indices 
# or work with sparse arrays.
#
is_in() { 
  _this=${1:=NONE} 
 sz="${#_this[@]}" 
 arr="${_this[*]}" 
 local array=("${@:1:$1}"); shift "$(($1 + 1))" in
} 

#shellcheck disable=SC2068
find_in_accounts() {
  this=${1} 
  source "${BT}"/src/accounts.gen
  for l in $(printf '%s\n' ${ACCOUNTS[@]}); do 
    echo "$l" | perl -nle "print \"$l\" if /${this}/" | perl -pe "s/%/ /g"
  done
}

# shellcheck disable=SC2068,SC2154
find_in_rds() {
  this=${1} 
  source "${BT}"/src/rds_map.src
  for l in $(printf '%s\n' ${rds_map[@]}); do 
    echo "$l" | perl -nle "print \"$l\" if /${this}/"; 
  done
}
#debug echo ${#rds_map[@]} server mapped.


# usage: 
# ------
# find_in_rds          wellspan-amd
# find_in role_types   primary 
# find_in guilds       (terraform|cicd) 
# find_in accounts     identity

# key_sort ACCOUNTS

# key_sort determines whether we're dealing with 
# a plain or associative array. 
key_sort() { 
  local -n a_of_a="${1:-this_index}"
  [[ "$(printf %s "${!a_of_a[@]}")" =~ ^[0-9]+$ ]] && type=a
} 

# shellcheck disable=SC2068,SC2120
role_arrays() {
  local -n a_of_a="${1:-this_index}"
  for a in $(${a_of_a[@]@A} && printf "role_%s\n" ${a_of_a[@]}); do
     local -n this_arr="${a}"
     for t in $(${this_arr[@]@A} && printf "%s\n" ${this_arr[@]} | sort); do
         echo "$a": "$t"
     done
  done
}

#role_arrays

# array of arrays
# ---------------
# bash has no native array of arrays implementation,
# but there is a need here, so... 
#
# 'this_index' array holds keys to other arrays,
# and can handle arrays or hashes.
this_index() {
  local -n a_of_a=${1:this_index}
  [[ "$(printf %s "${!a_of_a[@]}")" =~ ^[0-9]+$ ]] && type=a
  paste \
  <( ! [[ "$type" == "a" ]] && \
     for e in $("${a_of_a[@]@A}" && printf "%s\n" "${!a_of_a[@]}"); do echo "$e"; done) \
  <( for e in $("${a_of_a[@]@A}" && printf "%s\n"  "${a_of_a[@]}"); do echo "$e"; done) 
}

# read example: 
# -------------
#      find_in [HASH|ARRAY] some_thing
# echo find_in ACCOUNTS master
# find_in ACCOUNTS master
# echo find_in ROLE_TYPES: primary
# find_in ROLE_TYPES primary

# write example: 
# -------------- 
#    FOO["newKey"]="111222333444"
#    declare -A FOO newKey # make it so.
#    find_in   FOO        # shallow merge just happens.
# 
find_in_this() { 
  local -n a_of_a=${1:-this_index}
  while IFS= read -r line; do 
    echo "$line" | grep "$2"
  done <<< "$( this_index "${1}")" 
} 



# Test 
is_account() {
  local -n acct_ref="$1"
  [[ "${2}" =~ [0-9]{12} ]] && account_rev && return
  echo "${acct_ref[$2]}" 
}


# Queries aws for a list of all instances. 
# Caches them as an associative array in a local file. 
#
cache_inst() { 

  TEAM="$(get_team)" 
  [[ -z "${TEAM}" ]] && echo "FATAL: No team var." && exit 1
  chain_to prod-"${TEAM}"
 
  declare -a tmp
  tmp+=( "$(aws ec2 describe-instances \
          --output json \
          --region us-west-2 \
          --filters Name=tag-key,Values=Name \
          --query 'Reservations[*].Instances[*].{
                   Instance:InstanceId,
                   Name:Tags[?Key==`Name`]|[0].Value,
                   PrivAddr:PrivateIpAddress,
                   KeyName:KeyName,
                   PubAddr:PublicIpAddress
                 }' | \
          jq -r '.[][]|
                (.Name|gsub(" "; "_"))+","+
                (.Instance)+","+
                (.PrivAddr)+","+
                (.KeyName)+","+
                (.PubAddr)+"%"
        ')" )

    [ ! -d "${BT}/utils/gen" ] && \
    bt_log "FATAL: ${BT}/utils/gen dir not found." && die "${@}"

    ### build an associative array of hosts and descriptors.
    ### ----------------------------------------------------
    mkdir -p "${HOME}/tmp"
    tmppath="$(gmktemp -p "${HOME}"/tmp inst_map.XXXXXXXXXXXX)"
    echo -ne 'declare -A inst_map=( ' > "$tmppath" 
    while IFS= read -r l; do 
      while IFS=',' read -r n i ip k pp; do
        s="[$n]=$n,$i,$ip,$k,$pp%"
        bash -c "echo -ne $(printf ' %q' "$s ")" >> "${tmppath}"
        debug echo "wrote: $s"
      done 
    done < <(printf '%s\n' "${tmp[@]}" | sort)
    echo -ne ")\n" >> "$tmppath"
    # move new array to src dir.
    mv "$tmppath" "${BT}/src/inst_map.src"
}



# Once the cache is written (see cache_inst, above)
# this function will instantiate the associative array
# with all instance and container values. 
# 
# returns: associative array: inst_map 
# 
get_inst() {  

  declare -A inst_map
  inst_file="${BT}/src/inst_map.src"
  inst_size=$(cat "${BT}"/src/inst_map.src | wc -c)

  # inst_file is considered stale if older 
  # than 1 week, or smaller than 200 bytes.  
  [[ "$(( $(date +"%s") - $(gstat -c "%Y" "${inst_file}") ))" -gt 604800 || \
     "${inst_size}" -lt 200 ]] && { 
    echo "Instance cache is stale. Refreshing...."
    cache_inst "$@"
  }

  # shellcheck disable=SC1090,SC1094 
  { 
    debug echo file contents: "$(cat "${inst_file}")"
    source <(cat "${inst_file}")
    echo -ne sourced contents: "${#inst_map[@]}" hosts
  }
} 



