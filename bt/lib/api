#!/usr/local/bin/bash

to_debug() { [[ "${BT_DEBUG}" =~ rel ]] && >&2 "${@:2}" ;}

# Set and unset AWS_PROFILE.
# --------------------------
# Uses the 'aws configure list-profiles' command for 
# validation (also has auto-completion routines, which 
# are a bit slow).
#
aws_profile() {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    
    echo "aws_profile              <- print out current value"
    echo "aws_profile PROFILE_NAME <- set PROFILE_NAME active"
    echo "aws_profile --unset      <- unset the env vars"
  elif [ -z "$1" ]; then
    if [ -z "$AWS_PROFILE$AWS_DEFAULT_PROFILE" ]; then
      echo "No profile is set"
      return 1
    else
      echo "$AWS_PROFILE$AWS_DEFAULT_PROFILE"
    fi
  elif [ "$1" = "--unset" ]; then
    AWS_PROFILE=
    AWS_DEFAULT_PROFILE=
    # needed because of https://github.com/aws/aws-cli/issues/5016
    export -n AWS_PROFILE AWS_DEFAULT_PROFILE
  else
    # needed because of https://github.com/aws/aws-cli/issues/5546
    if ! aws configure list-profiles | grep -fq -- "$1"; then
      echo "$1 is not a valid profile"
      return 2
    else
      export AWS_PROFILE=$1 AWS_DEFAULT_PROFILE=$1
    fi;
  fi;
}


# prove you have perms.
perms() {
  login="$(aws sts get-caller-identity 2>/dev/null  | \
           jq -r '.Arn'                             | \
           cut -d':' -f 5-7                         | \
           perl -pe 's/(.*)\/[^\/]+/\1/')"
  [ -z "$login" ] && { 
    echo -e Failed && return 1
  } || { 
    echo -e ${login}
  }
}

get_account() {
  this_peek | jq -r '.account | to_entries[] | select(.key|tostring) | "\(.key)"'
}


regen_qv_stub() { 

    [[ -n "${AWS_SHARED_CREDENTIALS_FILE}" ]] && {
      CREDS="${AWS_SHARED_CREDENTIALS_FILE}"
      perl -pe '\n\n[qventus]\n  
              manager = awsume\n
              region = us-west-2/\n\n/g' >> "${CREDS}"
    }
    #stash_creds
} 


# unset all sessions and settings.
# --------------------------------
# This is critical, and if skipped will 
# cause major inconsistent behavior in 
# role chaining routines. 
# NOTES on aws-vault credential processes:
# https://github.com/99designs/aws-vault/blob/master/USAGE.md#environment-variables
#
wipe () { 
  #stash_creds  # broken. copies wrong file. 
  cat "${BT}/config.d/bt_creds.ini" > ~/.aws/bt_creds
  devops-sso-util logout  > /dev/null 2>&1
  # remove expired creds from cli, awsume caches
  rm -rf "${HOME}"/.aws/sso/cache/*
  rm -rf "${HOME}"/.aws/cli/cache/*
  #regen_creds 
  rm -rf "${HOME}"/.awsume/cache/*
  awsume --unset > /dev/null 2>&1
  aws_profile --unset
  unset AWSUME_PROFILE AWSUME_DEFAULT_PROFILE AWS_PROFILE AWS_DEFAULT_PROFILE
  # check we have no stale identities remaining.
  aws-whoami > /dev/null 2>&1 || echo "no identities left."
  devops-sso-util check >/dev/null 2>&1
  echo "all cached sessions removed."
}


check_login_status() { 

  [[ "${BT_ACCOUNT}" == "NONE" || "${BT_TEAM}" == "NONE" ]] && {
    status="failed none" && echo "${status}" && return
  } 

  [[ ${BT_ACCOUNT} == "prod" ]] && { 
    timestamp="$(devops-sso-util check -a 351480950201 2>/dev/null | \
               perl -nle 'print if s/.*expiration: ([\w\-\: ]+)/$1/')"
    seconds="$(echo $timestamp | ddiff -E -qf %S now)" 
    [[ "${seconds}" -gt 1 ]] && { 
      echo "${timestamp}" && return  
    } || { 
      echo "failed prod" && return
    }
  }

  [[ "${seconds}" -gt 1 && "${BT_ACCOUNT}" != "prod" ]] && { 
    timestamp="$(devops-sso-util check                            \
               --role-name "${BT_ACCOUNT}-${BT_TEAM}" 2>&1      | \
               perl -nle 'print if s/.*expiration: ([\w:\-]+)/$1/')"
    seconds="$(echo $timestamp | ddiff -E -qf %S now)" 
    echo "${seconds}"
    [[ "${seconds}" -gt 1 ]] && { 
      echo ${timestamp} && return  
    } || { 
      echo "failed number" && return
    }
  }
+ 
  echo "failed unknown" && return
}

# unattended login
autologin() { 
  echo -ne "LOGIN: "
  BT_ACCOUNT="${1:-"prod"}"

  [[ "${BT_TEAM}" == "NONE" || \
      -z "${BT_TEAM}"       ]] && { 
     echo "Failed to find a Team. Please rerun ~/.bt/gen/profiles"
     exit 1
  } 

  [[ "${BT_ACCOUNT}" == "NONE" || \
      -z "${BT_ACCOUNT}"       ]] && { 
     export BT_ACCOUNT="prod"  # default for now. 
     export BT_ROLE="${BT_ACCOUNT}-${BT_TEAM}"
  }
  status="$(check_login_status)"  
  [[ "${status}" == "failed" ]] && {  
    devops-sso-util login --profile prod-arch 2>/dev/null
    aws_profile qventus
    echo -e "${GREEN}$(perms)${NC}"
  }

  [[ "${status}" == "unknown" ]] && {  
    echo -e "${RED}Failed.${NC}"
  }

  seconds="$(echo "${status}" | ddiff -E -qf %S now)"
  [[ "${seconds}" -gt 1 ]] && { 
    echo -ne "${GREEN}${BT_ACCOUNT} - expires: ${status}${NC}\n"
  }
}    

